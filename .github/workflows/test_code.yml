name: Manual Tests
on:
  issue_comment:
    types: [created]

jobs:
  check-command:
    # Only run on pull request comments
    if: github.event.issue.pull_request && contains(github.event.comment.body, '/run@')
    runs-on: ubuntu-latest
    outputs:
      should-run: ${{ steps.check.outputs.should-run }}
      pr-ref: ${{ steps.pr-info.outputs.ref }}
      pr-sha: ${{ steps.pr-info.outputs.sha }}
    steps:
      - name: Debug - Print comment body
        run: |
          echo "Comment body: '${{ github.event.comment.body }}'"
          echo "Comment author: ${{ github.event.comment.user.login }}"
          echo "PR number: ${{ github.event.issue.number }}"
      
      - name: Check if comment contains /run@
        id: check
        run: |
          comment_body="${{ github.event.comment.body }}"
          # Trim whitespace and check if it starts with /run@
          if [[ "$comment_body" =~ ^[[:space:]]*\/run@.* ]]; then
            echo "should-run=true" >> $GITHUB_OUTPUT
            echo "Command detected: true"
          else
            echo "should-run=false" >> $GITHUB_OUTPUT
            echo "Command detected: false"
          fi
      
      - name: Get PR info
        id: pr-info
        if: steps.check.outputs.should-run == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pr_number="${{ github.event.issue.number }}"
          echo "Getting PR info for PR #$pr_number"
          pr_info=$(gh api repos/${{ github.repository }}/pulls/$pr_number)
          ref=$(echo "$pr_info" | jq -r .head.ref)
          sha=$(echo "$pr_info" | jq -r .head.sha)
          echo "PR ref: $ref"
          echo "PR sha: $sha"
          echo "ref=$ref" >> $GITHUB_OUTPUT
          echo "sha=$sha" >> $GITHUB_OUTPUT
      
      - name: Add reaction to comment
        if: steps.check.outputs.should-run == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Adding reaction to comment"
          gh api repos/${{ github.repository }}/issues/comments/${{ github.event.comment.id }}/reactions \
            --method POST \
            --field content="+1" || echo "Failed to add reaction, but continuing..."

  test-matrix-backend:
    needs: check-command
    if: needs.check-command.outputs.should-run == 'true'
    name: Test the code (${{ matrix.backend }})
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        backend: [tensorflow, jax, torch, numpy]
    
    env:
      KERAS_BACKEND: ${{ matrix.backend }}
    
    steps:
      - name: Debug - Print job info
        run: |
          echo "Running tests for backend: ${{ matrix.backend }}"
          echo "PR ref: ${{ needs.check-command.outputs.pr-ref }}"
          echo "PR sha: ${{ needs.check-command.outputs.pr-sha }}"
      
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.check-command.outputs.pr-sha }}
          fetch-depth: 0
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          
          echo "Installing backend-specific dependencies for: ${{ matrix.backend }}"
          
          # Install backend-specific dependencies
          if [ "${{ matrix.backend }}" == "tensorflow" ]; then
            pip install tensorflow>=2.13.0
          elif [ "${{ matrix.backend }}" == "jax" ]; then
            pip install "jax[cpu]" jaxlib
          elif [ "${{ matrix.backend }}" == "torch" ]; then
            pip install torch torchvision --index-url https://download.pytorch.org/whl/cpu
          elif [ "${{ matrix.backend }}" == "numpy" ]; then
            pip install numpy>=1.21.0
          fi
          
          # Install Keras
          pip install keras>=3.0.0
          
          # Install test dependencies
          pip install pytest pytest-cov pytest-xvfb
          
          # Install additional dependencies if requirements.txt exists
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          
          # Install package in development mode
          if [ -f setup.py ] || [ -f pyproject.toml ]; then
            pip install -e .
          fi
          
          # Install timm if specified
          pip install timm || echo "timm installation failed, continuing..."
      
      - name: Verify backend installation
        run: |
          python -c "
          import os
          os.environ['KERAS_BACKEND'] = '${{ matrix.backend }}'
          try:
              import keras
              print(f'Keras version: {keras.__version__}')
              print(f'Backend: {keras.backend.backend()}')
          except Exception as e:
              print(f'Error importing keras: {e}')
              exit(1)
          "
      
      - name: Run tests
        run: |
          echo "Running tests with backend: $KERAS_BACKEND"
          
          # Set display for any GUI tests
          export DISPLAY=:99
          
          # Create test directories if they don't exist
          mkdir -p tests/layers tests/models
          
          # Print large message for layer tests
          echo ""
          echo "================================================================"
          echo "=                                                              ="
          echo "=                   RUNNING LAYER TESTS                        ="
          echo "=                                                              ="
          echo "================================================================"
          echo ""
          
          # Find and run layer tests
          LAYER_TEST_FILES=$(find tests/layers -type f \( -name "test_*.py" -o -name "*_test.py" \) 2>/dev/null || echo "")
          if [ -n "$LAYER_TEST_FILES" ]; then
            echo "Found layer test files: $LAYER_TEST_FILES"
            pytest $LAYER_TEST_FILES -v --tb=short --cov=./ --cov-append || echo "Layer tests failed but continuing..."
          else
            echo "No layer test files found. Skipping layer tests."
          fi
          
          # Print large message for model tests
          echo ""
          echo "================================================================"
          echo "=                                                              ="
          echo "=                   RUNNING MODEL TESTS                        ="
          echo "=                                                              ="
          echo "================================================================"
          echo ""
          
          # Find and run model tests
          MODEL_TEST_FILES=$(find tests/models -type f \( -name "test_*.py" -o -name "*_test.py" \) 2>/dev/null || echo "")
          if [ -n "$MODEL_TEST_FILES" ]; then
            echo "Found model test files: $MODEL_TEST_FILES"
            pytest $MODEL_TEST_FILES -v --tb=short --cov=./ --cov-append || echo "Model tests failed but continuing..."
          else
            echo "No model test files found. Skipping model tests."
          fi
          
          # Run any other test files in tests directory
          echo ""
          echo "================================================================"
          echo "=                                                              ="
          echo "=                   RUNNING OTHER TESTS                        ="
          echo "=                                                              ="
          echo "================================================================"
          echo ""
          
          OTHER_TEST_FILES=$(find tests -maxdepth 1 -type f \( -name "test_*.py" -o -name "*_test.py" \) 2>/dev/null || echo "")
          if [ -n "$OTHER_TEST_FILES" ]; then
            echo "Found other test files: $OTHER_TEST_FILES"
            pytest $OTHER_TEST_FILES -v --tb=short --cov=./ --cov-append || echo "Other tests failed but continuing..."
          else
            echo "No other test files found."
          fi
          
          # Generate coverage report
          coverage xml -o coverage.xml || echo "Coverage report generation failed"
      
      - name: Upload coverage report
        if: always()
        uses: codecov/codecov-action@v4
        with:
          files: coverage.xml
          flags: keras-${{ matrix.backend }}
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
      
      - name: Comment test results
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            status_emoji="✅"
            status_text="PASSED"
          else
            status_emoji="❌"
            status_text="FAILED"
          fi
          
          gh api repos/${{ github.repository }}/issues/${{ github.event.issue.number }}/comments \
            --method POST \
            --field body="$status_emoji **${{ matrix.backend }}** backend tests: $status_text" || echo "Failed to comment results"