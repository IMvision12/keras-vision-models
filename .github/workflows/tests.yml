name: Tests
on:
  pull_request:
  release:
    types: [created]
jobs:
  format:
    name: Check the code format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Install format checking tools
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8
      
      - name: Check code format
        run: |
          black --check .
          isort --check --profile black .
          flake8 .
  
  test-keras:
    name: Test the code (${{ matrix.backend }})
    runs-on: ubuntu-latest
    needs: format
    strategy:
      fail-fast: false
      matrix:
        backend: [tensorflow, jax, torch, numpy]
    
    env:
      KERAS_BACKEND: ${{ matrix.backend }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      
      - name: Get pip cache dir
        id: pip-cache
        run: |
          python -m pip install --upgrade pip setuptools
          echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
      
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ matrix.backend }}-${{ hashFiles('pyproject.toml') }}-${{ hashFiles('requirements.txt') }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          
          # Install backend-specific dependencies
          if [ "${{ matrix.backend }}" == "tensorflow" ]; then
            pip install tensorflow
          elif [ "${{ matrix.backend }}" == "jax" ]; then
            pip install jax jaxlib
          elif [ "${{ matrix.backend }}" == "torch" ]; then
            pip install torch
          elif [ "${{ matrix.backend }}" == "numpy" ]; then
            pip install numpy
          fi
          
          # Install Keras
          pip install keras
          
          # Install additional dependencies
          pip install pytest pytest-cov timm
          pip install -r requirements.txt
          pip install -e .
      
      - name: Run tests
        run: |
          echo "Running tests with backend: $KERAS_BACKEND"
          
          # Print large message for layer tests
          echo ""
          echo "================================================================"
          echo "=                                                              ="
          echo "=                   RUNNING LAYER TESTS                        ="
          echo "=                                                              ="
          echo "================================================================"
          echo ""
          
          # Run layer tests
          pytest tests/layers/*_test.py -v --cov=./ --cov-append
          
          # Print large message for model tests
          echo ""
          echo "================================================================"
          echo "=                                                              ="
          echo "=                   RUNNING MODEL TESTS                        ="
          echo "=                                                              ="
          echo "================================================================"
          echo ""
          
          # Run model tests if they exist
          TEST_FILES=$(find tests/models -type f \( -name "test_*.py" -o -name "*_test.py" \) 2>/dev/null || echo "")
          if [ -n "$TEST_FILES" ]; then
            pytest $TEST_FILES -v --cov=./ --cov-append
          else
            echo "No model test files found. Skipping model tests."
          fi
          
          # Generate coverage report
          coverage xml -o coverage.xml
      
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: coverage.xml
          flags: keras-${{ matrix.backend }}
          fail_ci_if_error: false
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.backend }}
          path: |
            .pytest_cache
            test-results/
            coverage.xml
          retention-days: 2
      
      - name: Cleanup workspace
        if: always()
        run: |
          echo "ðŸ§¹ Performing cleanup..."
          # Clean up Python cache files
          find . -name "__pycache__" -type d -exec rm -rf {} +
          find . -name "*.pyc" -type f -delete
          find . -name ".pytest_cache" -type d -exec rm -rf {} +
          
          # Clean up model files
          find . -name "*.keras" -type f -delete
          
          # Clean up any temporary files
          find . -name "temp_*" -type f -delete
          find . -name "*_temp" -type f -delete
          find . -name "*.log" -type f -delete